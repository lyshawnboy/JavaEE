一、重写equals方法的要点：

  1. 使用==操作符检查“实参是否为指向对象的一个引用”。
  2.判断实参是否为null
  3. 使用instanceof操作符检查“实参是否为正确的类型”。
  4. 把实参转换到正确的类型。
  5. 对于该类中每一个“关键”域，检查实参中的域与当前对象中对应的域值是否匹
    配。对于既不是float也不是double类型的基本类型的域，可以使用==操作符
    进行比较；对于对象引用类型的域，可以递归地调用所引用的对象的equals方法；
    对于float类型的域，先使用Float.floatToIntBits转换成int类型的值，
    然后使用==操作符比较int类型的值；对于double类型的域，先使用
    Double.doubleToLongBits转换成long类型的值，然后使用==操作符比较
    long类型的值。
  6. 当你编写完成了equals方法之后，应该问自己三个问题：它是否是对称的、传
    递的、一致的？(其他两个特性通常会自行满足)如果答案是否定的，那么请找到
    这些特性未能满足的原因，再修改equals方法的代码。
    
    
二、怎样重写equals()方法？

    重写equals方法的要求：
    1.自反性：对于任何非空引用x，x.equals(x)应该返回true。
    2.对称性：对于任何引用x和y，如果x.equals(y)返回true，那么y.equals(x)也应该返回true。
    3.传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)也应该返回true。
    4.一致性：如果x和y引用的对象没有发生变化，那么反复调用x.equals(y)应该返回同样的结果。
    5.非空性：对于任意非空引用x，x.equals(null)应该返回false。
    
----------------------------------------------------------------------------------------------------------------------------------
  格式:
  Java代码
      public boolean equals(Object obj) {  
        if(this == obj)  
            return false;  
        if(obj == null)  
            return false;  
        if(getClass() != obj.getClass() )  
            return false;  
        MyClass other = (MyClass)obj;  
        if(str1 == null) {  
             if(obj.str1 != null) {  
                  return false;  
             }  
        }else if (!str1.equals(other.str1) )  
                 return false;  
         }  
        if(var1 != other.var1) { 
            return false; 
        }
        return true;  
      } 
 ----------------------------------------------------------------------------------------------------------------------------------
 
import java.util.*;

public class HelloWorld {
    public static void main(String[] args) {
        /*
        Collection c = new HashSet();
        c.add("hello");
        c.add(new Name("f1","l1"));
        c.add(new Integer(100));
        c.remove("hello"); 
        c.remove(new Integer(100));
        System.out.println(c.remove(new Name("f1","l1")));
        */
        Name n1 = new Name("01");
        Name n2 = new Name("01");
        
        Collection c = new HashSet();
        c.add(n1);
        System.out.println("------------");
        c.add(n2);
        System.out.println("------------");
        System.out.println(n1.equals(n2));
        System.out.println("------------");
        System.out.println(n1.hashCode());
        System.out.println(n2.hashCode());
        System.out.println(c);
    }


}

class Name {
    private String id;
    public Name(String id) {
        this.id = id; 
    }
    
    public String toString(){
        return this.id;
    }
    public boolean equals(Object obj) {
        if (obj instanceof Name) {
            Name name = (Name) obj;
            System.out.println("equal"+ name.id);
            return (id.equals(name.id));
        }
        return super.equals(obj);
    }
        
    public int hashCode() {
        Name name = (Name) this;
        System.out.println("Hash" + name.id);
        return id.hashCode();
            
    }
}
